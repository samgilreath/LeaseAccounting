depreciation[1] <- depreciation[1] + ddb_depreciation_first_period
# Prepare for remaining periods
remaining_periods <- num_periods - 1  # Remaining periods after first year
remaining_life <- life - 1  # Remaining life excluding the first year
for (period in 2:num_periods) {
if (book_value <= salvage) {
depreciation[period] <- 0
} else {
# Calculate DDB depreciation for the current period
ddb_depreciation <- book_value * ddb_rate
# Calculate straight-line depreciation for the remaining periods
sl_depreciation <- (book_value - salvage) / remaining_periods
# Determine which method to use
if (ddb_depreciation > sl_depreciation) {
depreciation[period] <- ddb_depreciation
book_value <- book_value - ddb_depreciation
} else {
# Switch to straight-line depreciation
depreciation[period] <- sl_depreciation
book_value <- book_value - sl_depreciation
# Adjust for remaining periods with straight-line depreciation
for (remaining_period in (period + 1):num_periods) {
if (remaining_period == num_periods) {
# Final period adjustment to match remaining book value
depreciation[remaining_period] <- book_value
} else {
sl_depreciation <- (book_value - salvage) / (num_periods - remaining_period + 1)
depreciation[remaining_period] <- sl_depreciation
}
book_value <- book_value - depreciation[remaining_period]
}
break
}
}
remaining_periods <- remaining_periods - 1
}
return(depreciation)
}
cost <- 1000
salvage <- 0
life <- 5
service_year <- 2024  # Input in-service year here
depreciation_schedule <- calculate_depreciation(cost, salvage, life, service_year)
print(depreciation_schedule)
# Input Parameters
lease_term <- 5  # Lease term in years
annual_discount_rate <- 6  # Annual discount rate in percent
monthly_payment <- 2000  # Monthly lease payment
start_date <- as.Date("2024-09-01")  # Lease start date
# Calculations
monthly_rate <- (annual_discount_rate / 100) / 12
n_payments <- lease_term * 12
# Calculate the lease liability (Present Value of Lease Payments)
lease_liability <- monthly_payment * ((1 - (1 + monthly_rate)^(-n_payments)) / monthly_rate)
# ROU Asset initially equals lease liability
ROU_asset <- lease_liability
# Initialize vectors for storing schedule details
schedule <- data.frame(
Month = seq.Date(from = start_date, by = "month", length.out = n_payments),
Payment = 1:n_payments,
LeasePayment = rep(monthly_payment, n_payments),
InterestExpense = numeric(n_payments),
PrincipalRepayment = numeric(n_payments),
LeaseLiability = numeric(n_payments),
ROUAmortization = numeric(n_payments),
ROUAsset = numeric(n_payments)
)
# Initial balances
balance <- lease_liability
ROU_balance <- ROU_asset
# Populate the schedule
for (i in 1:n_payments) {
interest_expense <- balance * monthly_rate
principal_repayment <- monthly_payment - interest_expense
ROU_amortization <- ROU_asset / n_payments
balance <- balance - principal_repayment
ROU_balance <- ROU_balance - ROU_amortization
schedule$InterestExpense[i] <- round(interest_expense, 2)
schedule$PrincipalRepayment[i] <- round(principal_repayment, 2)
schedule$LeaseLiability[i] <- round(balance, 2)
schedule$ROUAmortization[i] <- round(ROU_amortization, 2)
schedule$ROUAsset[i] <- round(ROU_balance, 2)
}
# Print the schedule
print(schedule)
# Explanation:
# Lease Liability Calculation: The present value of future lease payments is computed using the monthly discount rate and the total number of payments.
# Interest Expense: This is the interest on the remaining lease liability.
# Principal Repayment: The portion of the lease payment that reduces the lease liability.
# ROU Asset: The right-of-use asset is amortized on a straight-line basis over the lease term.
# ROU Amortization: The amortization of the ROU asset is evenly spread across the lease term.
# Output:
# Month: The date of each payment.
# Payment: Payment number.
# LeasePayment: The fixed monthly lease payment.
# InterestExpense: The interest portion of the lease payment.
# PrincipalRepayment: The portion of the payment that reduces the lease liability.
# LeaseLiability: The remaining lease liability after each payment.
# ROUAmortization: The amortization of the right-of-use asset.
# ROUAsset: The remaining right-of-use asset after each period.
# Input Parameters
loan_amount <- 60000000  # Principal
annual_rate <- 2.5 + sofr_rate       # Annual interest rate in percent
# Input Parameters
loan_amount <- 60000000  # Principal
annual_rate <- 2.5 + sofr_rate       # Annual interest rate in percent
# Check and install 'httr' if not already installed
if (!require("httr", quietly = TRUE)) {
install.packages("httr")
library(httr)
}
# Check and install 'jsonlite' if not already installed
if (!require("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
library(jsonlite)
}
# Function to get the current SOFR rate using the Federal Reserve Bank of New York API
get_sofr_rate <- function() {
# Define the API endpoint
url <- "https://markets.newyorkfed.org/api/rates/all/latest.json"
# Send a GET request to the API
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content from the response
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, flatten = TRUE)
# Extract the SOFR rate from the data
sofr_data <- data$refRates[sapply(data$refRates$type, function(x) x == "SOFR"), ]
# Return the most recent SOFR rate
if (nrow(sofr_data) > 0) {
# Convert effectiveDate to Date type and find the latest date
sofr_data$effectiveDate <- as.Date(sofr_data$effectiveDate)
latest_date <- max(sofr_data$effectiveDate)
latest_sofr_rate <- sofr_data$percentRate[sofr_data$effectiveDate == latest_date]
return(latest_sofr_rate)
} else {
stop("SOFR rate not found in the response.")
}
} else {
stop("Failed to fetch SOFR rate. Status code: ", status_code(response))
}
}
sofr_rate <- get_sofr_rate()
# Input Parameters
loan_amount <- 60000000  # Principal
annual_rate <- 2.5 + sofr_rate       # Annual interest rate in percent
years <- 5            # Loan term in years
start_date <- as.Date("2024-09-01")  # Start date of the loan (first payment date)
# Check and install 'httr' if not already installed
if (!require("httr", quietly = TRUE)) {
install.packages("httr")
library(httr)
}
# Check and install 'jsonlite' if not already installed
if (!require("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
library(jsonlite)
}
# Function to get the current SOFR rate using the Federal Reserve Bank of New York API
get_sofr_rate <- function() {
# Define the API endpoint
url <- "https://markets.newyorkfed.org/api/rates/all/latest.json"
# Send a GET request to the API
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content from the response
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, flatten = TRUE)
# Extract the SOFR rate from the data
sofr_data <- data$refRates[sapply(data$refRates$type, function(x) x == "SOFR"), ]
# Return the most recent SOFR rate
if (nrow(sofr_data) > 0) {
# Convert effectiveDate to Date type and find the latest date
sofr_data$effectiveDate <- as.Date(sofr_data$effectiveDate)
latest_date <- max(sofr_data$effectiveDate)
latest_sofr_rate <- sofr_data$percentRate[sofr_data$effectiveDate == latest_date]
return(latest_sofr_rate)
} else {
stop("SOFR rate not found in the response.")
}
} else {
stop("Failed to fetch SOFR rate. Status code: ", status_code(response))
}
}
sofr_rate <- get_sofr_rate()
# Calculations
monthly_rate <- (annual_rate / 100) / 12
n_payments <- years * 12
monthly_payment <- loan_amount * (monthly_rate * (1 + monthly_rate)^n_payments) / ((1 + monthly_rate)^n_payments - 1)
# Initialize vectors for storing schedule details
schedule <- data.frame(
Month = seq.Date(from = start_date, by = "month", length.out = n_payments),
Payment = 1:n_payments,
Interest = numeric(n_payments),
Principal = numeric(n_payments),
Balance = numeric(n_payments)
)
# Initial balance
balance <- loan_amount
# Populate the schedule
for (i in 1:n_payments) {
interest_payment <- balance * monthly_rate
principal_payment <- monthly_payment - interest_payment
balance <- balance - principal_payment
schedule$Interest[i] <- round(interest_payment, 2)
schedule$Principal[i] <- round(principal_payment, 2)
schedule$Balance[i] <- round(balance, 2)
}
# Add the monthly payment to the schedule
schedule$PaymentAmount <- round(monthly_payment, 2)
# Print the amortization schedule
print(schedule)
# Calculate the total interest paid
total_interest_paid <- sum(schedule$Interest)
print(paste("Total interest paid over the loan term: $", round(total_interest_paid, 2)))
# Calculate the total cost of the loan
total_loan_cost <- loan_amount + total_interest_paid
print(paste("Total cost of the loan: $", round(total_loan_cost, 2)))
rm(sofr_rate)
# Input Parameters
loan_amount <- 60000000  # Principal
annual_rate <- 2.5 + sofr_rate       # Annual interest rate in percent
# Check and install 'httr' if not already installed
if (!require("httr", quietly = TRUE)) {
install.packages("httr")
library(httr)
}
# Check and install 'jsonlite' if not already installed
if (!require("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
library(jsonlite)
}
# Function to get the current SOFR rate using the Federal Reserve Bank of New York API
get_sofr_rate <- function() {
# Define the API endpoint
url <- "https://markets.newyorkfed.org/api/rates/all/latest.json"
# Send a GET request to the API
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content from the response
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, flatten = TRUE)
# Extract the SOFR rate from the data
sofr_data <- data$refRates[sapply(data$refRates$type, function(x) x == "SOFR"), ]
# Return the most recent SOFR rate
if (nrow(sofr_data) > 0) {
# Convert effectiveDate to Date type and find the latest date
sofr_data$effectiveDate <- as.Date(sofr_data$effectiveDate)
latest_date <- max(sofr_data$effectiveDate)
latest_sofr_rate <- sofr_data$percentRate[sofr_data$effectiveDate == latest_date]
return(latest_sofr_rate)
} else {
stop("SOFR rate not found in the response.")
}
} else {
stop("Failed to fetch SOFR rate. Status code: ", status_code(response))
}
}
sofr_rate <- get_sofr_rate()
print(paste("Current SOFR rate:", sprintf("%.2f", sofr_rate)))
# Input Parameters
loan_amount <- 60000000  # Principal
annual_rate <- 2.5 + sofr_rate       # Annual interest rate in percent
years <- 5            # Loan term in years
start_date <- as.Date("2024-09-01")  # Start date of the loan (first payment date)
# Calculations
monthly_rate <- (annual_rate / 100) / 12
n_payments <- years * 12
monthly_payment <- loan_amount * (monthly_rate * (1 + monthly_rate)^n_payments) / ((1 + monthly_rate)^n_payments - 1)
# Initialize vectors for storing schedule details
schedule <- data.frame(
Month = seq.Date(from = start_date, by = "month", length.out = n_payments),
Payment = 1:n_payments,
Interest = numeric(n_payments),
Principal = numeric(n_payments),
Balance = numeric(n_payments)
)
# Initial balance
balance <- loan_amount
# Populate the schedule
for (i in 1:n_payments) {
interest_payment <- balance * monthly_rate
principal_payment <- monthly_payment - interest_payment
balance <- balance - principal_payment
schedule$Interest[i] <- round(interest_payment, 2)
schedule$Principal[i] <- round(principal_payment, 2)
schedule$Balance[i] <- round(balance, 2)
}
# Add the monthly payment to the schedule
schedule$PaymentAmount <- round(monthly_payment, 2)
# Print the amortization schedule
print(schedule)
# Calculate the total interest paid
total_interest_paid <- sum(schedule$Interest)
print(paste("Total interest paid over the loan term: $", round(total_interest_paid, 2)))
# Calculate the total cost of the loan
total_loan_cost <- loan_amount + total_interest_paid
print(paste("Total cost of the loan: $", round(total_loan_cost, 2)))
# Check and install 'httr' if not already installed
if (!require("httr", quietly = TRUE)) {
install.packages("httr")
library(httr)
}
# Check and install 'jsonlite' if not already installed
if (!require("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
library(jsonlite)
}
# Function to get the current SOFR rate using the Federal Reserve Bank of New York API
get_sofr_rate <- function() {
# Define the API endpoint
url <- "https://markets.newyorkfed.org/api/rates/all/latest.json"
# Send a GET request to the API
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content from the response
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, flatten = TRUE)
# Extract the SOFR rate from the data
sofr_data <- data$refRates[sapply(data$refRates$type, function(x) x == "SOFR"), ]
# Return the most recent SOFR rate
if (nrow(sofr_data) > 0) {
# Convert effectiveDate to Date type and find the latest date
sofr_data$effectiveDate <- as.Date(sofr_data$effectiveDate)
latest_date <- max(sofr_data$effectiveDate)
latest_sofr_rate <- sofr_data$percentRate[sofr_data$effectiveDate == latest_date]
return(latest_sofr_rate)
} else {
stop("SOFR rate not found in the response.")
}
} else {
stop("Failed to fetch SOFR rate. Status code: ", status_code(response))
}
}
sofr_rate <- get_sofr_rate()
print(paste("Current SOFR rate:", sprintf("%.2f", sofr_rate)))
# Input Parameters
loan_amount <- 60000000  # Principal
annual_rate <- sofr_rate       # Annual interest rate in percent
years <- 5            # Loan term in years
start_date <- as.Date("2024-09-01")  # Start date of the loan (first payment date)
# Calculations
monthly_rate <- (annual_rate / 100) / 12
n_payments <- years * 12
monthly_payment <- loan_amount * (monthly_rate * (1 + monthly_rate)^n_payments) / ((1 + monthly_rate)^n_payments - 1)
# Initialize vectors for storing schedule details
schedule <- data.frame(
Month = seq.Date(from = start_date, by = "month", length.out = n_payments),
Payment = 1:n_payments,
Interest = numeric(n_payments),
Principal = numeric(n_payments),
Balance = numeric(n_payments)
)
# Initial balance
balance <- loan_amount
# Populate the schedule
for (i in 1:n_payments) {
interest_payment <- balance * monthly_rate
principal_payment <- monthly_payment - interest_payment
balance <- balance - principal_payment
schedule$Interest[i] <- round(interest_payment, 2)
schedule$Principal[i] <- round(principal_payment, 2)
schedule$Balance[i] <- round(balance, 2)
}
# Add the monthly payment to the schedule
schedule$PaymentAmount <- round(monthly_payment, 2)
# Print the amortization schedule
print(schedule)
# Calculate the total interest paid
total_interest_paid <- sum(schedule$Interest)
print(paste("Total interest paid over the loan term: $", round(total_interest_paid, 2)))
# Calculate the total cost of the loan
total_loan_cost <- loan_amount + total_interest_paid
print(paste("Total cost of the loan: $", round(total_loan_cost, 2)))
# Check and install 'httr' if not already installed
if (!require("httr", quietly = TRUE)) {
install.packages("httr")
library(httr)
}
# Check and install 'jsonlite' if not already installed
if (!require("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
library(jsonlite)
}
# Function to get the current SOFR rate using the Federal Reserve Bank of New York API
get_sofr_rate <- function() {
# Define the API endpoint
url <- "https://markets.newyorkfed.org/api/rates/all/latest.json"
# Send a GET request to the API
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content from the response
content <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(content, flatten = TRUE)
# Extract the SOFR rate from the data
sofr_data <- data$refRates[sapply(data$refRates$type, function(x) x == "SOFR"), ]
# Return the most recent SOFR rate
if (nrow(sofr_data) > 0) {
# Convert effectiveDate to Date type and find the latest date
sofr_data$effectiveDate <- as.Date(sofr_data$effectiveDate)
latest_date <- max(sofr_data$effectiveDate)
latest_sofr_rate <- sofr_data$percentRate[sofr_data$effectiveDate == latest_date]
return(latest_sofr_rate)
} else {
stop("SOFR rate not found in the response.")
}
} else {
stop("Failed to fetch SOFR rate. Status code: ", status_code(response))
}
}
sofr_rate <- get_sofr_rate()
print(paste("Current SOFR rate:", sprintf("%.2f", sofr_rate)))
# Input Parameters
loan_amount <- 25000  # Principal
annual_rate <- sofr_rate       # Annual interest rate in percent
years <- 5            # Loan term in years
start_date <- as.Date("2024-09-01")  # Start date of the loan (first payment date)
# Calculations
monthly_rate <- (annual_rate / 100) / 12
n_payments <- years * 12
monthly_payment <- loan_amount * (monthly_rate * (1 + monthly_rate)^n_payments) / ((1 + monthly_rate)^n_payments - 1)
# Initialize vectors for storing schedule details
schedule <- data.frame(
Month = seq.Date(from = start_date, by = "month", length.out = n_payments),
Payment = 1:n_payments,
Interest = numeric(n_payments),
Principal = numeric(n_payments),
Balance = numeric(n_payments)
)
# Initial balance
balance <- loan_amount
# Populate the schedule
for (i in 1:n_payments) {
interest_payment <- balance * monthly_rate
principal_payment <- monthly_payment - interest_payment
balance <- balance - principal_payment
schedule$Interest[i] <- round(interest_payment, 2)
schedule$Principal[i] <- round(principal_payment, 2)
schedule$Balance[i] <- round(balance, 2)
}
# Add the monthly payment to the schedule
schedule$PaymentAmount <- round(monthly_payment, 2)
# Print the amortization schedule
print(schedule)
# Calculate the total interest paid
total_interest_paid <- sum(schedule$Interest)
print(paste("Total interest paid over the loan term: $", round(total_interest_paid, 2)))
# Calculate the total cost of the loan
total_loan_cost <- loan_amount + total_interest_paid
print(paste("Total cost of the loan: $", round(total_loan_cost, 2)))
# Input Parameters
lease_term <- 10  # Lease term in years
annual_discount_rate <- 6  # Annual discount rate in percent
monthly_payment <- 2000  # Monthly lease payment
start_date <- as.Date("2024-09-01")  # Lease start date
# Calculations
monthly_rate <- (annual_discount_rate / 100) / 12
n_payments <- lease_term * 12
# Calculate the lease liability (Present Value of Lease Payments)
lease_liability <- monthly_payment * ((1 - (1 + monthly_rate)^(-n_payments)) / monthly_rate)
# ROU Asset initially equals lease liability
ROU_asset <- lease_liability
# Initialize vectors for storing schedule details
schedule <- data.frame(
Month = seq.Date(from = start_date, by = "month", length.out = n_payments),
Payment = 1:n_payments,
LeasePayment = rep(monthly_payment, n_payments),
InterestExpense = numeric(n_payments),
PrincipalRepayment = numeric(n_payments),
LeaseLiability = numeric(n_payments),
ROUAmortization = numeric(n_payments),
ROUAsset = numeric(n_payments)
)
# Initial balances
balance <- lease_liability
ROU_balance <- ROU_asset
# Populate the schedule
for (i in 1:n_payments) {
interest_expense <- balance * monthly_rate
principal_repayment <- monthly_payment - interest_expense
ROU_amortization <- ROU_asset / n_payments
balance <- balance - principal_repayment
ROU_balance <- ROU_balance - ROU_amortization
schedule$InterestExpense[i] <- round(interest_expense, 2)
schedule$PrincipalRepayment[i] <- round(principal_repayment, 2)
schedule$LeaseLiability[i] <- round(balance, 2)
schedule$ROUAmortization[i] <- round(ROU_amortization, 2)
schedule$ROUAsset[i] <- round(ROU_balance, 2)
}
# Print the schedule
print(schedule)
# Explanation:
# Lease Liability Calculation: The present value of future lease payments is computed using the monthly discount rate and the total number of payments.
# Interest Expense: This is the interest on the remaining lease liability.
# Principal Repayment: The portion of the lease payment that reduces the lease liability.
# ROU Asset: The right-of-use asset is amortized on a straight-line basis over the lease term.
# ROU Amortization: The amortization of the ROU asset is evenly spread across the lease term.
# Output:
# Month: The date of each payment.
# Payment: Payment number.
# LeasePayment: The fixed monthly lease payment.
# InterestExpense: The interest portion of the lease payment.
# PrincipalRepayment: The portion of the payment that reduces the lease liability.
# LeaseLiability: The remaining lease liability after each payment.
# ROUAmortization: The amortization of the right-of-use asset.
# ROUAsset: The remaining right-of-use asset after each period.
write.csv(schedule,file='schedule.csv',quote=FALSE)
